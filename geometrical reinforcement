#import des librairies
import random
import numpy as np
import matplotlib.pyplot as plt

#introduction de la fonction index
def index(A,e):
    '''Renvoie le premier indice de la position de e dans A'''
    for i in range(len(A)):
        if A[i] == e : return i



#initialisation des variables

rho=np.arange(1.01,2,0.01)
N = 1000 #nombre de passages

Nb_simulation = [10,100,1000,10000]



#Définition des fonctions

#renforcement géométrique
def r(ro,x):
    return ro*x


#SIMULATION
def simulation(ro ,N):
    #initialisation
    alpha0 = 1
    beta0 = 1
    A0 = 0
    B0 = 0

    An = A0
    Bn = B0
    alphan = alpha0
    betan = beta0

    total = alphan + betan

    t = np.arange(0,N,1)

    A = np.zeros((N))
    B = np.zeros((N))

    # A3D = np.zeros((N, Nb_simulation))
    # B3D = np.zeros((N, Nb_simulation))


    #simulation
    for i in range(N):
        var = random.random()

        if var <= (alphan/total) :
            alphan = r(ro,alphan)
            total = alphan + betan
            An += 1

            A[i] = An
            B[i] = Bn
            
        else : 
            betan = r(ro, betan)
            total = alphan + betan
            Bn += 1

            A[i] = An
            B[i] = Bn
        
    #chemin choisi par les fourmims
    # if An >= Bn : res = "A"
    # else : res = "B"
    tn = 0
    #rang où la suite converge
    if np.max(An) >= np.max(Bn) :
        tn = index(B,np.max(Bn))

    # return A, B, t, res
    return tn



# Graphique de l'évolution du nombres d'emprunts des chemins
# plt.figure(1)
# plt.plot(t, A, label = "An", color = "orange")
# plt.plot(t, B, label = "Bn", color = "blue")
# plt.title("rho = {}".format(rho))
# plt.legend()

# A1 , B1 , t1, res1 = simulation(1.05, 300)
# A2 , B2 , t2, res2 = simulation(1.1, 120)
# A3 , B3 , t3, res3 = simulation(1.2,80)
# A4 , B4 , t4, res4 = simulation(1.5,30)

# plt.subplot(2,2,1)
# plt.plot(t1, A1, label = "An", color = "orange")
# plt.plot(t1, B1, label = "Bn", color = "blue")
# plt.title("rho = {}".format(1.05))
# plt.subplot(2,2,2)
# plt.plot(t2, A2, label = "An", color = "orange")
# plt.plot(t2, B2, label = "Bn", color = "blue")
# plt.title("rho = {}".format(1.1))
# plt.subplot(2,2,3)
# plt.plot(t3, A3, label = "An", color = "orange")
# plt.plot(t3, B3, label = "Bn", color = "blue")
# plt.title("rho = {}".format(1.2))
# plt.subplot(2,2,4)
# plt.plot(t4, A4, label = "An", color = "orange")
# plt.plot(t4, B4, label = "Bn", color = "blue")
# plt.title("rho = {}".format(1.5))
# plt.tight_layout()

#Graphique des nombres d'emprunts de A et B
# N simulation
# hist_subplt = []
# for i in Nb_simulation:
#     histAB = []
#     for j in range(i):
#         A, B, t, res = simulation()
#         histAB.append(res)
#     hist_subplt.append(histAB)
# nbins = 3
# for i in range(1,len(hist_subplt)+1):
#     plt.subplot(2,2,i)
#     plt.hist(hist_subplt[i-1],nbins)
#     plt.title("{} simulations".format(Nb_simulation[i-1]))
# plt.tight_layout()

resTn = [] ; temp = []
for i in range(len(rho)):
    for j in range(N):
        temp.append(simulation(rho[i],N))
    resTn.append(np.mean(temp))
    temp = []

plt.plot(rho,resTn, color = "purple")
plt.xlabel("rho")
plt.ylabel("n")

plt.show()

